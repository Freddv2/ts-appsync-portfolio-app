type Portfolio {
    id: String!
    name: String!
    stocks: [Stock]!
    transactions: [Transaction]!
}
type Stock {
    stock: String!
    shares: Int!
    buyPrice: Int!
    buyCost: Int!
    marketPrice: Int!
    totalValue: Int!
    portfolio: [Portfolio!]
}

type Transaction {
    id: String!
    date: String!
    stock: String!
    shares: Int!
    action: Operation!
    askPrice: Int!
    finalPrice: Int
    totalValue: Int
    status: Status!
    portfolio: [Portfolio!]
}

enum Operation {
    BUY
    SELL
}

enum Status {
    PENDING
    COMPLETED
}

input TransactionCompletedInput {
    portfolioId: String!
    transactionId: String!
    date: String!
    stock: String!
    shares: Int!
    action: Operation!
    askPrice: Int!
    finalPrice: Int
    totalValue: Int
    status: Status!
}

input PlaceOrderInput {
    portfolioId: String!
    stock: String!
    shares: Int!
    action: Operation!
    price: Int!
}

type Query {
    getPortfolio(id: ID!): Portfolio
}

type Mutation {
    placeOrder(input: PlaceOrderInput!) : Transaction!
    publishOrderExecuted(transaction: TransactionCompletedInput!) : Transaction
    reset(table: String!) : Boolean
}

type Subscription {
    onOrderExecuted: Transaction
    @aws_subscribe(mutations: ["publishOrderExecuted"])
}

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}
